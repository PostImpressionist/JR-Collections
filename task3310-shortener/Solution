package com.javarush.task.task33.task3310;

import com.javarush.task.task33.task3310.strategy.*;

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class Solution {
    //Этот метод должен для переданного множества строк возвращать множество идентификаторов.
    // Идентификатор для каждой отдельной строки нужно получить, используя shortener.
    public static Set<Long> getIds(Shortener shortener, Set<String> strings){
        Set<Long> ids = new HashSet<>();
        for (String s: strings) {
            ids.add(shortener.getId(s));
        }
        return ids;
    }

    //Метод будет возвращать множество строк, которое соответствует переданному множеству идентификаторов.
    //    При реальном использовании Shortener, задача получить из множества строк множество идентификаторов
    //    и наоборот скорее всего не встретится, это нужно исключительно для тестирования.
    public static Set<String> getStrings(Shortener shortener, Set<Long> keys){
        Set<String> strings = new HashSet<>();

        for (Long l: keys) {
            strings.add(shortener.getString(l));
        }
        return strings;
    }

    // Метод будет тестировать работу переданной стратегии на определенном количестве элементов elementsNumber.
    // Реализация метода должна:
    //            6.2.3.1. Выводить имя класса стратегии. Имя не должно включать имя пакета.
    //            6.2.3.2. Генерировать тестовое множество строк, используя Helper и заданное количество
    //            элементов elementsNumber.
    //            6.2.3.3. Создавать объект типа Shortener, используя переданную стратегию.
    //            6.2.3.4. Замерять и выводить время необходимое для отработки метода getIds для заданной
    //            стратегии и заданного множества элементов. Время вывести в миллисекундах.
    //            При замере времени работы метода можно пренебречь переключением процессора на другие потоки,
    //            временем, которое тратится на сам вызов, возврат значений и вызов методов получения времени (даты). Замер времени произведи с использованием объектов типа Date.
    //            6.2.3.5. Замерять и выводить время необходимое для отработки метода getStrings
    //            для заданной стратегии и полученного в предыдущем пункте множества идентификаторов.
    //6.2.3.6. Сравнивать одинаковое ли содержимое множества строк, которое было сгенерировано и множества,
    // которое было возвращено методом getStrings. Если множества одинаковы, то выведи "Тест пройден.",
    // иначе "Тест не пройден.".
    //
    public static void testStrategy(StorageStrategy strategy, long elementsNumber){
        Helper.printMessage(strategy.getClass().getSimpleName());

        Set<String> testStrings = new HashSet<>();
        for (int i = 0; i < elementsNumber; i++) {
            testStrings.add(Helper.generateRandomString());
        }
        Shortener shortener = new Shortener(strategy);

        Long startTime = new Date().getTime();
        Set<Long> ides = getIds(shortener, testStrings);
        Helper.printMessage("Method getIds work time = " +
               (new Date().getTime() - startTime));

        startTime = new Date().getTime();
        Set<String> strings = getStrings(shortener, ides);
        Helper.printMessage("Method getStrings work time = " +
                (new Date().getTime() - startTime));

        if(!setsComparator(testStrings, strings))
            Helper.printMessage("Тест не пройден.");
        else Helper.printMessage("Тест пройден.");

    }


    public static void main(String[] args) {
        testStrategy(new HashMapStorageStrategy(), 10000);
        System.out.println("=====================================================");
        System.out.println("=====================================================");
        testStrategy(new DualHashBidiMapStorageStrategy(), 10000);
    }
    
    static <T> boolean setsComparator (Set<T> first, Set<T> second){

        if(first.size() != second.size()) return false;
        for (T t: first) {
            if(!second.contains(t)) return false;
        }
        return true;
    }
}
