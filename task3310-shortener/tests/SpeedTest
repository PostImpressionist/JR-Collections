package com.javarush.task.task33.task3310.tests;

import com.javarush.task.task33.task3310.Helper;
import com.javarush.task.task33.task3310.Shortener;
import com.javarush.task.task33.task3310.strategy.HashBiMapStorageStrategy;
import com.javarush.task.task33.task3310.strategy.HashMapStorageStrategy;
import org.junit.Assert;
import org.junit.Test;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

public class SpeedTest {

    public long getTimeToGetIds(Shortener shortener, Set<String> strings, Set<Long> ids){
        long now = new Date().getTime();

        for (String s: strings) {
            ids.add(shortener.getId(s));
        }
        return new Date().getTime() - now;
    }
    //Он должен возвращать время в миллисекундах необходимое для получения идентификаторов для всех строк из strings.
    // Идентификаторы должны быть записаны в ids.


    public long getTimeToGetStrings(Shortener shortener, Set<Long> ids, Set<String> strings) {
        Date startTimestamp = new Date();
        for (Long id : ids)
            strings.add(shortener.getString(id));
        Date endTimestamp = new Date();
        return endTimestamp.getTime() - startTimestamp.getTime();
    }
    // Он должен возвращать время в миллисекундах необходимое для получения строк для всех идентификаторов из ids.
    // Строки должны быть записаны в strings.

    @Test
    public void testHashMapStorage(){

        Shortener shortener1 = new Shortener(new HashMapStorageStrategy());
        Shortener shortener2 = new Shortener(new HashBiMapStorageStrategy());

        Set<String> origStrings = new HashSet<>();
        Set<Long> ids1 = new HashSet<>();
        Set<String> strings1 = new HashSet<>();
        long stringToIdTime1 = getTimeToGetIds(shortener1, origStrings, ids1);
        long idToStringTime1 = getTimeToGetStrings(shortener1, ids1, strings1);

        Set<Long> ids2 = new HashSet<>();
        Set<String> strings2 = new HashSet<>();
        long stringToIdTime2 = getTimeToGetIds(shortener2, origStrings, ids2);
        long idToStringTime2 = getTimeToGetStrings(shortener2, ids2, strings2);

        Assert.assertTrue(stringToIdTime1 > stringToIdTime2);
        Assert.assertEquals(idToStringTime1, idToStringTime2, 30);

    }
    /*Он должен:
    15.4.1. Создавать два объекта типа Shortener, один на базе HashMapStorageStrategy,
        второй на базе HashBiMapStorageStrategy. Назовем их shortener1 и shortener2.
   + 15.4.2. Генерировать с помощью Helper 10000 строк и помещать их в сет со строками, назовем его origStrings.
   + 15.4.3. Получать время получения идентификаторов для origStrings
        (вызывать метод getTimeToGetIds для shortener1, а затем для shortener2).
    + 15.4.4. Проверять с помощью junit, что время, полученное в предыдущем пункте для shortener1 больше,
        чем для shortener2.
    + 15.4.5. Получать время получения строк (вызывать метод getTimeToGetStrings для shortener1 и shortener2).
    + 15.4.6. Проверять с помощью junit, что время, полученное в предыдущем пункте для shortener1
        примерно равно времени для shortener2. Используй метод assertEquals(float expected, float actual,
            float delta). В качестве delta можно использовать 30, этого вполне достаточно для наших экспериментов.
    */
}
